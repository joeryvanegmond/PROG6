/*
Deployment script for BOEF

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "BOEF"
:setvar DefaultFilePrefix "BOEF"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[Accessoires]...';


GO
CREATE TABLE [dbo].[Accessoires] (
    [Id]      INT          IDENTITY (1, 1) NOT NULL,
    [Name]    VARCHAR (50) NOT NULL,
    [Price]   MONEY        NOT NULL,
    [IdBeest] INT          NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Beest]...';


GO
CREATE TABLE [dbo].[Beest] (
    [Id]    INT          IDENTITY (1, 1) NOT NULL,
    [Name]  VARCHAR (50) NOT NULL,
    [Type]  VARCHAR (50) NOT NULL,
    [Prijs] MONEY        NOT NULL,
    [Image] INT          NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[BeestImage]...';


GO
CREATE TABLE [dbo].[BeestImage] (
    [Id]        INT          IDENTITY (1, 1) NOT NULL,
    [Name]      VARCHAR (50) NOT NULL,
    [ImagePath] VARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[BeestMetBoeking]...';


GO
CREATE TABLE [dbo].[BeestMetBoeking] (
    [BeestId]   INT NOT NULL,
    [BoekingId] INT NOT NULL
);


GO
PRINT N'Creating [dbo].[BeestType]...';


GO
CREATE TABLE [dbo].[BeestType] (
    [Type] VARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([Type] ASC)
);


GO
PRINT N'Creating [dbo].[Boeking]...';


GO
CREATE TABLE [dbo].[Boeking] (
    [Id]         INT      IDENTITY (1, 1) NOT NULL,
    [Date]       DATETIME NOT NULL,
    [CustomerId] INT      NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Customer]...';


GO
CREATE TABLE [dbo].[Customer] (
    [Id]        INT           IDENTITY (1, 1) NOT NULL,
    [Firstname] NVARCHAR (50) NOT NULL,
    [Infix]     NCHAR (10)    NULL,
    [Lastname]  NVARCHAR (50) NOT NULL,
    [Adress]    NVARCHAR (50) NOT NULL,
    [Mail]      NVARCHAR (50) NULL,
    [Telephone] NCHAR (10)    NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[FK_Accessoires_ToBeest]...';


GO
ALTER TABLE [dbo].[Accessoires]
    ADD CONSTRAINT [FK_Accessoires_ToBeest] FOREIGN KEY ([IdBeest]) REFERENCES [dbo].[Beest] ([Id]);


GO
PRINT N'Creating [dbo].[FK_Beest_ToType]...';


GO
ALTER TABLE [dbo].[Beest]
    ADD CONSTRAINT [FK_Beest_ToType] FOREIGN KEY ([Type]) REFERENCES [dbo].[BeestType] ([Type]);


GO
PRINT N'Creating [dbo].[FK_Beest_ToImage]...';


GO
ALTER TABLE [dbo].[Beest]
    ADD CONSTRAINT [FK_Beest_ToImage] FOREIGN KEY ([Image]) REFERENCES [dbo].[BeestImage] ([Id]);


GO
PRINT N'Creating [dbo].[FK_BeestMetBoeking_ToBeest]...';


GO
ALTER TABLE [dbo].[BeestMetBoeking]
    ADD CONSTRAINT [FK_BeestMetBoeking_ToBeest] FOREIGN KEY ([BeestId]) REFERENCES [dbo].[Beest] ([Id]);


GO
PRINT N'Creating [dbo].[FK_BeestMetBoeking_ToBoeking]...';


GO
ALTER TABLE [dbo].[BeestMetBoeking]
    ADD CONSTRAINT [FK_BeestMetBoeking_ToBoeking] FOREIGN KEY ([BoekingId]) REFERENCES [dbo].[Boeking] ([Id]);


GO
PRINT N'Creating [dbo].[FK_Boeking_ToCustomer]...';


GO
ALTER TABLE [dbo].[Boeking]
    ADD CONSTRAINT [FK_Boeking_ToCustomer] FOREIGN KEY ([CustomerId]) REFERENCES [dbo].[Customer] ([Id]);


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a5040d2f-c91b-47b6-81e8-b54a688ed5d7')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a5040d2f-c91b-47b6-81e8-b54a688ed5d7')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f638b98f-3d06-4bd9-98ef-b6d1e65d305c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f638b98f-3d06-4bd9-98ef-b6d1e65d305c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '291c83c1-48ae-47c7-b2b3-9c1cb1a1d0b5')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('291c83c1-48ae-47c7-b2b3-9c1cb1a1d0b5')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '05ffcdb7-c4c2-4340-ac05-049322b27484')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('05ffcdb7-c4c2-4340-ac05-049322b27484')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '385bf2d4-74ec-4e0b-951e-d823a5d4337a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('385bf2d4-74ec-4e0b-951e-d823a5d4337a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ee6b61ea-5d20-4a57-9ec1-4a59d45eb00c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ee6b61ea-5d20-4a57-9ec1-4a59d45eb00c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'fc1795de-6f07-4d7b-bb18-6a2e8b6d5cf6')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('fc1795de-6f07-4d7b-bb18-6a2e8b6d5cf6')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '0f451585-f88e-47b3-a486-f74f24096b2f')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('0f451585-f88e-47b3-a486-f74f24096b2f')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1b4163c9-7f1e-4aad-bdaf-1e9acd444aed')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1b4163c9-7f1e-4aad-bdaf-1e9acd444aed')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '870af84a-95bc-49fa-84f0-c5c6e49d0b6d')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('870af84a-95bc-49fa-84f0-c5c6e49d0b6d')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ea73812f-32f7-4e1b-9983-9737abb7c350')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ea73812f-32f7-4e1b-9983-9737abb7c350')

GO

GO
-- Beest types
insert into BeestType([Type]) values ('Boerderij');
insert into BeestType([Type]) values ('Woestijn');
insert into BeestType([Type]) values ('Jungle');
insert into BeestType([Type]) values ('Sneeuw');

-- Beest images
insert into BeestImage([Name], [ImageData]) values ('Aap', (SELECT BulkColumn 
FROM Openrowset( Bulk 'C:~\Images\aap.png', Single_Blob) as img));
insert into BeestImage([Name], [ImageData]) values ('Bever', (SELECT BulkColumn 
FROM Openrowset( Bulk 'C:~\Images\bever.png', Single_Blob) as img));
insert into BeestImage([Name], [ImageData]) values ('Doggo', (SELECT BulkColumn 
FROM Openrowset( Bulk 'C:~\Images\doggo.png', Single_Blob) as img));
insert into BeestImage([Name], [ImageData]) values ('Donkey', (SELECT BulkColumn 
FROM Openrowset( Bulk 'C:~\Images\donkey.png', Single_Blob) as img));
insert into BeestImage([Name], [ImageData]) values ('Duck', (SELECT BulkColumn 
FROM Openrowset( Bulk 'C:~\Images\duck.png', Single_Blob) as img));
insert into BeestImage([Name], [ImageData]) values ('IJsbeer', (SELECT BulkColumn 
FROM Openrowset( Bulk 'C:~\Images\ijsbeer.png', Single_Blob) as img));
insert into BeestImage([Name], [ImageData]) values ('Kat', (SELECT BulkColumn 
FROM Openrowset( Bulk 'C:~\Images\kat.png', Single_Blob) as img));
insert into BeestImage([Name], [ImageData]) values ('Kip', (SELECT BulkColumn 
FROM Openrowset( Bulk 'C:~\Images\kip.png', Single_Blob) as img));
insert into BeestImage([Name], [ImageData]) values ('Koe', (SELECT BulkColumn 
FROM Openrowset( Bulk 'C:~\Images\koe.png', Single_Blob) as img));
insert into BeestImage([Name], [ImageData]) values ('Kuiken', (SELECT BulkColumn 
FROM Openrowset( Bulk 'C:~\Images\kuiken.png', Single_Blob) as img));
insert into BeestImage([Name], [ImageData]) values ('Leeuw', (SELECT BulkColumn 
FROM Openrowset( Bulk 'C:~\Images\leeuw.png', Single_Blob) as img));
insert into BeestImage([Name], [ImageData]) values ('Olifant', (SELECT BulkColumn 
FROM Openrowset( Bulk 'C:~\Images\olifant.png', Single_Blob) as img));
insert into BeestImage([Name], [ImageData]) values ('Pingwing', (SELECT BulkColumn 
FROM Openrowset( Bulk 'C:~\Images\pingwing.png', Single_Blob) as img));
insert into BeestImage([Name], [ImageData]) values ('Varken', (SELECT BulkColumn 
FROM Openrowset( Bulk 'C:~\Images\varken.png', Single_Blob) as img));
insert into BeestImage([Name], [ImageData]) values ('Zebra', (SELECT BulkColumn 
FROM Openrowset( Bulk 'C:~\Images\zebra.png', Single_Blob) as img));
insert into BeestImage([Name], [ImageData]) values ('Zeehond', (SELECT BulkColumn 
FROM Openrowset( Bulk 'C:~\Images\zeehond.png', Single_Blob) as img));
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
